(** Main types for Tjr_btree_examples. NOTE that this sets blk_id to (a type iso to) int *)

(** {2 Binprot marshalling types} *)

(** These are in module {!Bin_prot_marshalling}. *)

(** {2 Blk_layer types} *)
module Blk_id = Blk_id_as_int
type blk_id = Blk_id.blk_id
(* include Blk_id *)

(* let increment_blk_id i =  *)
  (* i |> Blk_id.to_int |> fun i -> i+1 |> Blk_id.of_int *)

(** Blk allocator state: just an int/blk_id *)
type 'blk_id blk_allocator_state = {
  min_free_blk_id:'blk_id;
}



(*
(** A type to record a pair: the min free blk_id and the btree root block.

FIXME if btree_root was an option, we could avoid passing
   empty_disk_leaf_as_blk *)
type root_block = {
  free       :blk_id;
  btree_root :blk_id
}
*)

(* FIXME remove the following *)

(*
(** FIXME why use fstore and fstore_passing? *)
type btree_from_file_result = {
  fd         :Unix.file_descr;
  blk_allocator_state: blk_id blk_allocator_state;
  btree_root_state: blk_id btree_root_state;
  fstore     :Tjr_store.fstore ref;
  run        :'a. ('a, fstore_passing) m -> 'a; (* uses the fstore field! *)
  close      :unit -> unit;  (* FIXME should be monadic ? *)
}
*)

(*
type btree_from_file = {
  btree_from_file: 
    fn:string -> create:bool -> init:bool -> btree_from_file_result
}
*)

(** Used in blk_layer_2 *)
type ('a,'b) from_file_and_close = {
  from_file: 'a;
  close: 'b
}




(** INTERNAL PLEASE IGNORE This is another attempt to isolate the
   various stages of type construction. *)
module Staging = struct

  module type M = sig
    type t
    val monad_ops: t monad_ops
  end


  module type B1 = sig
    type blk_id
    type blk
    val blk_ops: blk blk_ops
  end

  module type B2 = sig
    include M
    include B1

    (** NOTE typically blk_dev_ops requires eg a file_descr *)
    val blk_dev_ops: (blk_id,blk,t)blk_dev_ops

    (* val blk_layer: (blk,(blk_id,blk,t)blk_dev_ops)blk_layer FIXME this is just a pair of blk_ops and blk_dev_ops *)
  end


  module type K1 = sig
    type k
    val compare_k: k -> k -> int
    type v
  end


  module type KB1 = sig
    include B1
    include K1
  end

end
