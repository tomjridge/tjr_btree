(** Implement disk operations backed by a file-descriptor


FIXME this depends on Unix, so maybe move elsewhere
 *)

open Base_types
open Block
open Test
(* open Disk_ops *)


type fd = Unix.file_descr


(** [fd_ops] identifies a filedescriptor in the global state *)
(* FIXME why use mref? why not have all operations parameterized by
   fd? because we want a uniform interface to disks, and in general they
   are not identified by fd 

*)
type 't fd_ops = (fd,'t) mref


(* in the monad ----------------------------------------------------- *)

(** Construct [disk_ops] *)
let make_disk ~monad_ops ~blk_sz ~fd_ops = 
  let ( >>= ) = monad_ops.bind in
  let return = monad_ops.return in
  let read: blk_id -> (blk,'t) m = fun r ->
    fd_ops.get () >>= fun fd ->
    return (read ~fd ~blk_sz ~blk_id:r)
  in
  let write: blk_id -> blk -> (unit,'t) m = fun r buf -> 
    fd_ops.get () >>= fun fd ->           
    return (write ~fd ~blk_sz ~blk_id:r ~blk:buf)
  in
  Disk_ops.mk_disk_ops ~blk_sz ~read ~write
