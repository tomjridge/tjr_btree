module Key_value :
  sig
    val key_eq : ('a -> 'a -> Isa_export.Arith.int) -> 'a -> 'a -> bool
    val key_lt : ('a -> 'a -> Isa_export.Arith.int) -> 'a -> 'a -> bool
    val check_keys :
      ('a -> 'a -> Isa_export.Arith.int) ->
      'a option -> 'a Isa_export.Set.set -> 'a option -> bool
    val ck_tests : unit
    val ck2_tests : unit
    val kvs_equal : ('a * 'b) list -> ('a * 'b) list -> bool
    val ordered_key_list :
      ('a -> 'a -> Isa_export.Arith.int) -> 'a list -> bool
    val okl_tests : unit
    val kvs_delete :
      ('a -> 'a -> Isa_export.Arith.int) ->
      'a -> ('a * 'b) list -> ('a * 'b) list
    val kvs_insert :
      ('a -> 'a -> Isa_export.Arith.int) ->
      'a * 'b -> ('a * 'b) list -> ('a * 'b) list
    val kvs_insert_tests : unit
  end
module Prelude :
  sig
    type min_size_t =
      Isa_export.Prelude.min_size_t =
        Small_root_node_or_leaf
      | Small_node
      | Small_leaf
    type 'a constants_ext =
      'a Isa_export.Prelude.constants_ext =
        Constants_ext of Isa_export.Arith.nat * Isa_export.Arith.nat *
          Isa_export.Arith.nat * Isa_export.Arith.nat * 'a
    val max_leaf_size : 'a constants_ext -> Isa_export.Arith.nat
    val max_node_keys : 'a constants_ext -> Isa_export.Arith.nat
    val min_leaf_size : 'a constants_ext -> Isa_export.Arith.nat
    val min_node_keys : 'a constants_ext -> Isa_export.Arith.nat
  end
module Searching_and_splitting :
  sig
    type ('a, 'b, 'c) rsplit_node_ext =
      ('a, 'b, 'c) Isa_export.Searching_and_splitting.rsplit_node_ext =
        Rsplit_node_ext of 'a list * 'b list * 'b * 'a list * 'b list * 'c
    val rsplit_node_ext_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) ->
      ('c -> Yojson.Safe.json) ->
      ('a, 'b, 'c) rsplit_node_ext -> Yojson.Safe.json
    val rsplit_node_ext_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'c Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json ->
      ('a, 'b, 'c) rsplit_node_ext Ppx_deriving_yojson_runtime.error_or
    val split_leaf :
      unit Isa_export.Prelude.constants_ext ->
      ('a * 'b) list -> ('a * 'b) list * ('a * ('a * 'b) list)
    val split_node :
      unit Isa_export.Prelude.constants_ext ->
      'a list * 'b list -> ('a list * 'b list) * ('a * ('a list * 'b list))
    val r_ts2 : ('a, 'b, 'c) rsplit_node_ext -> 'b list
    val r_ts1 : ('a, 'b, 'c) rsplit_node_ext -> 'b list
    val r_ks2 : ('a, 'b, 'c) rsplit_node_ext -> 'a list
    val r_ks1 : ('a, 'b, 'c) rsplit_node_ext -> 'a list
    val r_t : ('a, 'b, 'c) rsplit_node_ext -> 'b
    val unsplit_node : ('a, 'b, unit) rsplit_node_ext -> 'a list * 'b list
    val mk_rsplit_node :
      ('a -> 'a -> Isa_export.Arith.int) ->
      'a -> 'a list * 'b list -> ('a, 'b, unit) rsplit_node_ext
    val rsplit_node_map :
      ('a -> 'b) ->
      ('c, 'a, unit) rsplit_node_ext -> ('c, 'b, unit) rsplit_node_ext
    val dest_rsplit_node :
      ('a, 'b, unit) rsplit_node_ext ->
      'a list * ('b list * ('b * ('a list * 'b list)))
    val rsplit_get_bounds :
      ('a, 'b, unit) rsplit_node_ext -> 'a option * 'a option
    val r_t_update :
      ('a -> 'a) ->
      ('b, 'a, 'c) rsplit_node_ext -> ('b, 'a, 'c) rsplit_node_ext
    val r_ks1_update :
      ('a list -> 'a list) ->
      ('a, 'b, 'c) rsplit_node_ext -> ('a, 'b, 'c) rsplit_node_ext
    val r_ks2_update :
      ('a list -> 'a list) ->
      ('a, 'b, 'c) rsplit_node_ext -> ('a, 'b, 'c) rsplit_node_ext
    val r_ts1_update :
      ('a list -> 'a list) ->
      ('b, 'a, 'c) rsplit_node_ext -> ('b, 'a, 'c) rsplit_node_ext
    val r_ts2_update :
      ('a list -> 'a list) ->
      ('b, 'a, 'c) rsplit_node_ext -> ('b, 'a, 'c) rsplit_node_ext
  end
module Tree :
  sig
    type ('a, 'b) tree =
      ('a, 'b) tree =
        Node of ('a list * ('a, 'b) tree list)
      | Leaf of ('a * 'b) list
    val tree_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) -> ('a, 'b) tree -> Yojson.Safe.json
    val tree_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json -> ('a, 'b) tree Ppx_deriving_yojson_runtime.error_or
    val height : ('a, 'b) tree -> Isa_export.Arith.nat
    val dest_Node : ('a, 'b) tree -> 'a list * ('a, 'b) tree list
    val tree_equal : ('a, 'b) tree -> ('a, 'b) tree -> bool
    val tree_to_leaves : ('a, 'b) tree -> ('a * 'b) list list
    val tree_to_kvs : ('a, 'b) tree -> ('a * 'b) list
    val tree_to_keys : ('a, 'b) tree -> 'a Isa_export.Set.set
    val wellformed_tree :
      unit Isa_export.Prelude.constants_ext ->
      Isa_export.Prelude.min_size_t option ->
      ('a -> 'a -> Isa_export.Arith.int) -> ('a, 'b) tree -> bool
  end
module Tree_stack :
  sig
    type ('k, 'a) rstack =
        ('k, 'a, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
        list
    val rstack_map :
      ('a -> 'b) ->
      ('c, 'a, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list ->
      ('c, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list
    val no_focus :
      ('a, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list ->
      ('a, 'b option, unit)
      Isa_export.Searching_and_splitting.rsplit_node_ext list
    val r_stk_to_rs :
      ('a, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list ->
      'b list
    val rstack_equal :
      ('a, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list ->
      ('a, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list ->
      bool
    val tree_to_rstack :
      ('a -> 'a -> Isa_export.Arith.int) ->
      'a ->
      ('a, 'b) tree ->
      Isa_export.Arith.nat ->
      ('a, 'b) tree *
      ('a, ('a, 'b) tree, unit)
      Isa_export.Searching_and_splitting.rsplit_node_ext list
    val rstack_get_bounds :
      ('a, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list ->
      'a option * 'a option
    val add_new_stack_frame :
      ('a -> 'a -> Isa_export.Arith.int) ->
      'a ->
      'a list * 'b list ->
      ('a, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list ->
      ('a, 'b, unit) Isa_export.Searching_and_splitting.rsplit_node_ext list *
      'b
  end
module Find_state :
  sig
    type ('a, 'b, 'c) find_state =
      ('a, 'b, 'c) Isa_export.Find_state.find_state =
        F_down of
          ('c *
           ('a *
            ('c *
             ('a, 'c, unit)
             Isa_export.Searching_and_splitting.rsplit_node_ext list)))
      | F_finished of
          ('c *
           ('a *
            ('c *
             (('a * 'b) list *
              ('a, 'c, unit)
              Isa_export.Searching_and_splitting.rsplit_node_ext list))))
    val find_state_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) ->
      ('c -> Yojson.Safe.json) -> ('a, 'b, 'c) find_state -> Yojson.Safe.json
    val find_state_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'c Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json ->
      ('a, 'b, 'c) find_state Ppx_deriving_yojson_runtime.error_or
    val dummy : unit
    val wf_trans :
      'a * ('b, 'c, 'd) find_state -> 'a * ('b, 'c, 'd) find_state -> bool
    val mk_find_state : 'a -> 'b -> ('a, 'c, 'b) find_state
    val wf_store_tree :
      ('a -> 'b -> ('c, 'd) tree option) ->
      'a -> 'b -> ('c, 'd) tree -> bool
    val dest_f_finished :
      ('a, 'b, 'c) find_state ->
      ('c *
       ('a *
        ('c *
         (('a * 'b) list *
          ('a, 'c, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
          list))))
      option
    val wellformed_find_state :
      ('a -> 'a -> Isa_export.Arith.int) ->
      ('b -> 'c -> ('a, 'd) tree option) ->
      ('a, 'd) tree -> 'b -> ('a, 'd, 'c) find_state -> bool
  end
module Disk_node :
  sig
    type ('a, 'b, 'c) dnode =
      ('a, 'b, 'c) Isa_export.Disk_node.dnode =
        Disk_node of ('a list * 'c list)
      | Disk_leaf of ('a * 'b) list
    val dnode_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) ->
      ('c -> Yojson.Safe.json) -> ('a, 'b, 'c) dnode -> Yojson.Safe.json
    val dnode_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'c Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json ->
      ('a, 'b, 'c) dnode Ppx_deriving_yojson_runtime.error_or
    val mk_Disk_node : 'a list * 'b list -> ('a, 'c, 'b) dnode
    val dest_Disk_leaf : ('a, 'b, 'c) dnode -> ('a * 'b) list
    val dest_Disk_node : ('a, 'b, 'c) dnode -> 'a list * 'c list
  end
module Leaf_stream_state :
  sig
    type ('a, 'b, 'c) ls_state =
      ('a, 'b, 'c) Isa_export.Leaf_stream_state.ls_state =
        LS_down of
          ('c *
           ('a, 'c, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
           list)
      | LS_leaf of
          (('a * 'b) list *
           ('a, 'c, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
           list)
      | LS_up of
          ('a, 'c, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
          list
    val dummy : unit
    val mk_ls_state : 'a -> ('b, 'c, 'a) ls_state
    val dest_LS_leaf : ('a, 'b, 'c) ls_state -> ('a * 'b) list option
    val lss_is_finished : ('a, 'b, 'c) ls_state -> bool
  end
module Insert_many_state :
  sig
    type ('a, 'b, 'c) im_fo =
      ('a, 'b, 'c) Isa_export.Insert_many_state.im_fo =
        IM1 of ('c * ('a * 'b) list)
      | IM2 of (('c * ('a * 'c)) * ('a * 'b) list)
    type ('a, 'b, 'c) imst =
      ('a, 'b, 'c) Isa_export.Insert_many_state.imst =
        IM_down of
          (('a, 'b, 'c) Isa_export.Find_state.find_state *
           ('b * ('a * 'b) list))
      | IM_up of
          (('a, 'b, 'c) im_fo *
           ('a, 'c, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
           list)
      | IM_finished of ('c * ('a * 'b) list)
    val dummy : unit
    val mk_im_state : 'a -> 'b -> ('a * 'b) list -> 'c -> ('a, 'b, 'c) imst
    val dest_im_finished : ('a, 'b, 'c) imst -> ('c * ('a * 'b) list) option
  end
module Insert_state :
  sig
    type ('a, 'b, 'c) i12_t =
      ('a, 'b, 'c) Isa_export.Insert_state.i12_t =
        I1 of 'c
      | I2 of ('c * ('a * 'c))
    val i12_t_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) ->
      ('c -> Yojson.Safe.json) -> ('a, 'b, 'c) i12_t -> Yojson.Safe.json
    val i12_t_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'c Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json ->
      ('a, 'b, 'c) i12_t Ppx_deriving_yojson_runtime.error_or
    type ('a, 'b, 'c) insert_state =
      ('a, 'b, 'c) Isa_export.Insert_state.insert_state =
        I_down of (('a, 'b, 'c) Isa_export.Find_state.find_state * 'b)
      | I_up of
          (('a, 'b, 'c) i12_t *
           ('a, 'c, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
           list)
      | I_finished of 'c
    val insert_state_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) ->
      ('c -> Yojson.Safe.json) ->
      ('a, 'b, 'c) insert_state -> Yojson.Safe.json
    val insert_state_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'c Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json ->
      ('a, 'b, 'c) insert_state Ppx_deriving_yojson_runtime.error_or
    val dummy : unit
    val dest_i_finished : ('a, 'b, 'c) insert_state -> 'c option
    val mk_insert_state : 'a -> 'b -> 'c -> ('a, 'b, 'c) insert_state
    val wellformed_insert_state :
      unit Isa_export.Prelude.constants_ext ->
      ('a -> 'a -> Isa_export.Arith.int) ->
      ('b -> 'c -> ('a, 'd) tree option) ->
      ('a, 'd) tree ->
      'b -> 'a -> 'd -> ('a, 'd, 'c) insert_state -> bool
  end
module Delete_state :
  sig
    type ('a, 'b, 'c) del_t =
      ('a, 'b, 'c) Isa_export.Delete_state.del_t =
        D_small_leaf of ('a * 'b) list
      | D_small_node of ('a list * 'c list)
      | D_updated_subtree of 'c
    val del_t_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) ->
      ('c -> Yojson.Safe.json) -> ('a, 'b, 'c) del_t -> Yojson.Safe.json
    val del_t_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'c Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json ->
      ('a, 'b, 'c) del_t Ppx_deriving_yojson_runtime.error_or
    type ('a, 'b, 'c) delete_state =
      ('a, 'b, 'c) Isa_export.Delete_state.delete_state =
        D_down of (('a, 'b, 'c) Isa_export.Find_state.find_state * 'c)
      | D_up of
          (('a, 'b, 'c) del_t *
           (('a, 'c, unit) Isa_export.Searching_and_splitting.rsplit_node_ext
            list * 'c))
      | D_finished of 'c
    val delete_state_to_yojson :
      ('a -> Yojson.Safe.json) ->
      ('b -> Yojson.Safe.json) ->
      ('c -> Yojson.Safe.json) ->
      ('a, 'b, 'c) delete_state -> Yojson.Safe.json
    val delete_state_of_yojson :
      (Yojson.Safe.json -> 'a Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'b Ppx_deriving_yojson_runtime.error_or) ->
      (Yojson.Safe.json -> 'c Ppx_deriving_yojson_runtime.error_or) ->
      Yojson.Safe.json ->
      ('a, 'b, 'c) delete_state Ppx_deriving_yojson_runtime.error_or
    val dummy : unit
    val dest_d_finished : ('a, 'b, 'c) delete_state -> 'c option
    val mk_delete_state : 'a -> 'b -> ('a, 'c, 'b) delete_state
    val wellformed_delete_state :
      unit Isa_export.Prelude.constants_ext ->
      ('a -> 'a -> Isa_export.Arith.int) ->
      ('b -> 'c -> ('a, 'd) tree option) ->
      ('a, 'd) tree ->
      'b -> 'a -> ('a, 'd, 'c) delete_state -> bool
  end
module Pre_params :
  sig
    val dummy : unit
    val mk_r2t :
      ('a -> 'b -> ('c, 'd, 'b) Isa_export.Disk_node.dnode option) ->
      Isa_export.Arith.nat ->
      'a -> 'b -> ('c, 'd) tree option
  end
module Params :
  sig
    type 'a ps1 =
      'a Isa_export.Params.ps1 =
        Ps1 of
          (unit Isa_export.Prelude.constants_ext *
           ('a -> 'a -> Isa_export.Arith.int))
    val dummy : unit
    val dot_cmp : 'a ps1 -> 'a -> 'a -> Isa_export.Arith.int
    val dot_constants : 'a ps1 -> unit Isa_export.Prelude.constants_ext
  end
module type MONAD =
  sig
    type ('a, 'b) mm
    val bind : ('a -> ('b, 'c) mm) -> ('a, 'c) mm -> ('b, 'c) mm
    val fmap : ('a -> 'b) -> ('a, 'c) mm -> ('b, 'c) mm
    val dummy : unit
    val return : 'a -> ('a, 'b) mm
  end
module Make :
  functor (Monad : MONAD) ->
    sig
      module Store_ops :
        sig
          val store_free :
            ('a -> (('b, 'c, 'a) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('b, 'c, 'a) Isa_export.Disk_node.dnode -> ('a, 'd) mm) *
             ('a list -> (unit, 'd) mm)) ->
            'a list -> (unit, 'd) mm
          val store_read :
            ('a -> (('b, 'c, 'a) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('b, 'c, 'a) Isa_export.Disk_node.dnode -> ('a, 'd) mm) *
             ('a list -> (unit, 'd) mm)) ->
            'a -> (('b, 'c, 'a) Isa_export.Disk_node.dnode, 'd) mm
          val store_alloc :
            ('a -> (('b, 'c, 'a) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('b, 'c, 'a) Isa_export.Disk_node.dnode -> ('a, 'd) mm) *
             ('a list -> (unit, 'd) mm)) ->
            ('b, 'c, 'a) Isa_export.Disk_node.dnode -> ('a, 'd) mm
          val wf_store_ops :
            ('a -> (('b, 'c, 'a) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('b, 'c, 'a) Isa_export.Disk_node.dnode -> ('a, 'd) mm) *
             ('a list -> (unit, 'd) mm)) ->
            bool
        end
      module Find :
        sig
          val find_step :
            'a Isa_export.Params.ps1 ->
            ('b -> (('a, 'c, 'b) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('a, 'c, 'b) Isa_export.Disk_node.dnode -> ('b, 'd) mm) *
             ('b list -> (unit, 'd) mm)) ->
            ('a, 'c, 'b) Isa_export.Find_state.find_state ->
            (('a, 'c, 'b) Isa_export.Find_state.find_state, 'd) mm
        end
      module Insert :
        sig
          val insert_step :
            'a Isa_export.Params.ps1 ->
            ('b -> (('a, 'c, 'b) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('a, 'c, 'b) Isa_export.Disk_node.dnode -> ('b, 'd) mm) *
             ('b list -> (unit, 'd) mm)) ->
            ('a, 'c, 'b) Isa_export.Insert_state.insert_state ->
            (('a, 'c, 'b) Isa_export.Insert_state.insert_state, 'd) mm
        end
      module Delete2 :
        sig
          val delete_step :
            'a Isa_export.Params.ps1 ->
            ('b -> (('a, 'c, 'b) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('a, 'c, 'b) Isa_export.Disk_node.dnode -> ('b, 'd) mm) *
             ('b list -> (unit, 'd) mm)) ->
            ('a, 'c, 'b) Isa_export.Delete_state.delete_state ->
            (('a, 'c, 'b) Isa_export.Delete_state.delete_state, 'd) mm
        end
      module Insert_many :
        sig
          val insert_step :
            'a Isa_export.Params.ps1 ->
            ('b -> (('a, 'c, 'b) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('a, 'c, 'b) Isa_export.Disk_node.dnode -> ('b, 'd) mm) *
             ('b list -> (unit, 'd) mm)) ->
            ('a, 'c, 'b) Isa_export.Insert_many_state.imst ->
            (('a, 'c, 'b) Isa_export.Insert_many_state.imst, 'd) mm
        end
      module Leaf_stream :
        sig
          val lss_step :
            'a Isa_export.Params.ps1 ->
            ('b -> (('a, 'c, 'b) Isa_export.Disk_node.dnode, 'd) mm) *
            ((('a, 'c, 'b) Isa_export.Disk_node.dnode -> ('b, 'd) mm) *
             ('b list -> (unit, 'd) mm)) ->
            ('a, 'c, 'b) Isa_export.Leaf_stream_state.ls_state ->
            (('a, 'c, 'b) Isa_export.Leaf_stream_state.ls_state, 'd) mm
        end
    end
